<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 根据表结构，自动生成mapper.xml,mapper接口及实体类 -->
<generatorConfiguration>
	<!-- 配置文件路径 -->
	<properties resource="mybatis-generator-datasource.properties" />
	<!--数据库驱动包路径 -->
	<!-- <classPathEntry location="D:\\Program Files\\eclipse\\workspace\\LouisePRO_Robin\\WebRoot\\WEB-INF\\lib\\mysql-connector-java-5.1.34.jar"/> -->
	<context id="mysql" defaultModelType="flat" targetRuntime="MyBatis3Simple">
		<property name="beginningDelimiter" value="'" />
		<property name="endingDelimiter" value="'" />
		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="UTF-8" />
		<!-- 格式化java代码 -->
		<property name="javaFormatter"
			value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
		<!-- 格式化XML代码 -->
		<property name="xmlFormatter"
			value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />
		<!-- 注释配置 -->
		<commentGenerator type="com.example.demo.plugin.mybatisgenerator.MyCommentGenerator">
			<property name="suppressAllComments" value="false" />
			<property name="suppressDate" value="true" />
		</commentGenerator>
		<!-- 数据库连接 -->
		<jdbcConnection connectionURL="${url}" driverClass="${driverClassName}"
			password="${password}" userId="${username}" />
		<!-- java模型创建器，是必须要的元素 -->
		<!-- targetPackage: 生成实体类存放的包名;targetProject:指定目标项目路径，使用的是文件系统的绝对路径 -->
		<javaModelGenerator targetPackage="com.example.demo.entity"
			targetProject="NebulaAuth">
			<!-- 设置一个根对象， 如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项 
				注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括： 1，属性名相同，类型相同，有相同的getter/setter方法； -->
			<property name="rootClass" value="com.example.demo.entity.base.BaseEntity"/>
		</javaModelGenerator>
		<!-- 生成SQL map的XML文件生成器， -->
		<sqlMapGenerator targetPackage="com.example.demo.dao"
			targetProject="NebulaAuth" />
		<!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 -->
		<javaClientGenerator targetPackage="com.example.demo.dao"
			targetProject="NebulaAuth" type="XMLMAPPER">
			<!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查 -->
			<property name="rootInterface" value="com.example.demo.dao.base.SqlMapper"/> 
		</javaClientGenerator>
		<!-- tableName：指定要生成的表名，可以使用SQL通配符匹配多个表。例如要生成全部的表，可以按如下配置：<table tableName="%" 
			/> -->
		<!-- domainObjectName:生成对象的基本名称。如果没有指定，MBG会自动根据表名来生成名称。 -->
		<table tableName="sys_user" domainObjectName="SysUser">
		</table>
	</context>
</generatorConfiguration>